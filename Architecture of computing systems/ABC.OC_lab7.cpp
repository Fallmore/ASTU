#include <iostream>

int main()
{

	setlocale(LC_ALL, "Russian");	// установка русского алфавита

	//В небоскрёбе N этажей и всего один подъезд; 
	//на каждом этаже по три квартиры; 
	//лифт может останавливаться только на нечётных этажах. 
	//Человек садится в лифт и набирает номер нужной ему квартиры М. 
	//На какой этаж должен доставить лифт пассажира?

	// Если делать лифт для человека (хотя остановка на нечётных этажах это уже не для человека),
	// то в случае чётных этажей лифт будем останавливать на этаж выше

	// -- тестовые значения --
	// для N = 0 ожидается ответ 1
	// для N = 3 ожидается ответ 1
	// для N = 4 ожидается ответ 3
	// для N = 7 ожидается ответ 3
	// для N = 10 ожидается ответ 5

	unsigned int N = 0, M = 0, mod0 = 0; // объявляем переменные и инициализируем в ноль

	std::cout << "Самодуров Вячеслав. Лабораторная работа № 13-14. Вариант №16.\n\n"
		<< "Введите количество этажей: ";   std::cin >> N;	//ввод значения N

	__asm
	{
		mov eax, N			// eax = N
		mov ebx, 3			// ebx = 3

		cdq					// расширили до учетверённого слова
		idiv ebx			// eax = N / 3, edx = N % 3

		cmp edx, 0			// сравнили N % 3 c 0
		jne mod_0			// если N % 3 != 0, то переход на метку mod_0
		jmp compare_mod_2	// если нет, то переход на метку compare_mod_2

		mod_0 :				// N % 3 != 0
		inc eax				// ++eax

			compare_mod_2 :
		mov M, eax			// M = eax	копируем
			mov ebx, 2		// ebx = 2

			cdq				// расширили до учетверённого слова
			idiv ebx		// находим остаток edx = eax % 2
			mov eax, M		// eax = M возвращаем обратно значение

			cmp edx, 0		// сравнили edx c 0
			je mod_2		// если edx = 0, то переход на метку mod_2
			jmp finish		// если нет, то переход на метку finish

			mod_2 :			// edx = 0
		inc eax				// ++eax

			finish : mov M, eax		// M = eax
	}

	std::cout << "Результаты вычислений на Assembler: " << M << std::endl;

	// -- здесь вычисления на С++ -- 
	M = N / 3;
	if (N % 3 != 0) ++M;
	if (M % 2 == 0) ++M;

	std::cout << "Результаты вычислений на C++: " << M << std::endl << std::endl;
}
